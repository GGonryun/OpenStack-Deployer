- name: 'install dependencies'
  yum:
    name:
      - centos-release-openstack-train
    state: present
  tags:
    - basic

- name: 'Upgrade all packages'
  yum:
    name: '*'
    state: latest
  tags:
    - basic

- name: 'install base packages'
  yum:
    name:
      - python-openstackclient
      - openstack-selinux
      - ebtables 
      - ipset
    state: present
  register: base_install
  tags:
    - basic

- name: 'install firewalld'
  yum:
    name: 
      - firewalld
    state: present
  register: firewalld_install
  tags:
    - basic
    - firewall

- name: 'setup firewall'
  block:
    # - name: 'enable firewalld'
    #   systemd:
    #     name: firewalld
    #     state: started
    #     enabled: yes
    # - shell: firewall-cmd --permanent --add-service=mysql
    # - shell: firewall-cmd --zone=public --permanent --add-port=4369/tcp --add-port=25672/tcp --add-port=5671-5672/tcp --add-port=15672/tcp  --add-port=61613-61614/tcp --add-port=1883/tcp --add-port=8883/tcp
    #   # TODO: the memcached zone might already exist, running the teardown 
    #   # script will remove this but it is not truely idempotent yet.
    # - shell: firewall-cmd --new-zone=memcached --permanent
    #   ignore_errors: True
    # - shell: firewall-cmd --zone=memcached --add-port=11211/udp --permanent
    # - shell: firewall-cmd --zone=memcached --add-port=11211/tcp --permanent
    # - shell: firewall-cmd --zone=memcached --add-source=10.0.0.0/24 --permanent
    # - shell: firewall-cmd --zone=memcached --add-source=10.10.10.0/24 --permanent
    # - shell: firewall-cmd --add-port={2379,2380}/tcp --permanent
    # - shell: firewall-cmd --zone=public --add-port=5000/tcp --permanent
    # - shell: firewall-cmd --permanent --zone=public --add-service=http
    # - shell: firewall-cmd --permanent --zone=public --add-service=https
    # - shell: firewall-cmd --add-port=9292/tcp --permanent
    # - shell: firewall-cmd --add-port=9292/udp --permanent
    # - shell: firewall-cmd --add-port=8778/tcp --permanent
    # - shell: firewall-cmd --add-port={9696/tcp,9696/udp} --permanent
    # - shell: firewall-cmd --add-port={5902/tcp,5902/udp} --permanent
    # - shell: firewall-cmd --add-port={6080/tcp,6081/tcp,6082/tcp,8775/tcp,8778/tcp} --permanent 
    # - shell: firewall-cmd --add-port={9696/tcp,9696/udp} --permanent 
    # - shell: firewall-cmd --add-port={68/tcp,68/udp} --permanent 
    # - shell: firewall-cmd --add-port=5900-5999/tcp --permanent
    # - shell: firewall-cmd --add-port=8776/tcp --permanent
    - shell: setsebool -P nis_enabled 1
    - shell: setsebool -P glance_api_can_network on 
      # TODO: the two semanage commands may already have been
      # run previously and are not truely idempotent.
    - shell: semanage port -a -t http_port_t -p tcp 8778
      ignore_errors: True
    - shell: semanage port -a -t http_port_t -p tcp 8774
      ignore_errors: True
    # - name: 'reload firewall'
    #   shell: firewall-cmd --reload
  when: (firewalld_install is changed) and (base_install is changed)
  tags:
    - basic
    - firewall
    
- name: 'copy startup template'
  template:
    backup: yes
    src: utility/startup.sh.j2
    dest: '~/startup.sh'
    owner: root
    group: root
    mode: '0755'
  register: startup_update
  tags:
    - basic
    - startup

- name: 'install chrony'
  yum:
    name:
      - chrony
    state: present
  register: chrony_update
  tags:
    - basic
    - chrony

- name: 'setup chrony'
  block:
    - name: 'copy chrony template'
      template:
        backup: yes
        src: common/chrony.conf.j2
        dest: /etc/chrony.conf
    - name: 'restart chrony'
      systemd:
        name: chronyd
        state: restarted
        enabled: yes
  when: chrony_update is changed
  tags:
    - basic
    - chrony

- name: 'install rabbitmq'
  yum:
    name:
      - rabbitmq-server
    state: present
  register: installed_rabbitmq
  tags:
    - basic
    - rabbitmq

- name: 'setup rabbitmq'
  block:
    - name: 'restart & enable rabbitmq'
      systemd:
        name: rabbitmq-server.service
        state: started
        enabled: yes
    # TODO: Investigate why the teardown scripts fail to delete the user.
    - name: 'create rabbitmqctl user'
      shell: "rabbitmqctl add_user openstack {{ rabbitmq_password }}"
      ignore_errors: True
    - name: 'set rabbitmqctl user permissions'
      ignore_errors: True
      shell: 'rabbitmqctl set_permissions openstack ".*" ".*" ".*"'
  when: installed_rabbitmq is changed
  tags:
    - basic
    - rabbitmq

- name: 'install memcached'
  yum:
    name:
      - memcached 
      - python-memcached
    state: present
  register: installed_memcached
  tags:
    - basic
    - memcached

- name: 'setup memcached'
  block:
    - name: 'copy template'
      template:
        backup: yes
        src: common/memcached.j2
        dest: /etc/sysconfig/memcached
    - name: 'restart & enable memcached'
      systemd:
        name: memcached.service
        state: started
        enabled: yes
  when: installed_memcached is changed
  tags:
    - basic
    - memcached

- name: 'install etcd'
  yum:
    name:
      - etcd 
    state: present
  register: installed_etcd
  tags:
    - basic
    - etcd

- name: 'setup etcd'
  block:
    - name: 'copy template'
      template:
        backup: yes
        src: common/etcd.conf.j2
        dest: /etc/etcd/etcd.conf
    - name: 'restart & enable etcd'
      systemd:
        name: etcd
        state: started
        enabled: yes
  when: installed_etcd is changed
  tags:
    - basic
    - etcd

- name: 'install mariadb'
  yum:
    name:
      - mariadb 
      - mariadb-server
      - python2-PyMySQL
      - rabbitmq-server
    state: present
  register: install_mysql
  tags:
    - mariadb

- name: 'setup mariadb'
  block:
    - name: 'copy mysql template'
      template:
        backup: yes
        src: common/openstack.conf.j2
        dest: /etc/my.cnf.d/openstack.conf
    - name: 'restart & enable mysql'
      systemd:
        name: mariadb.service
        state: restarted
        enabled: yes
    - name: Sets the root password 
      mysql_user: 
        name: "root"
        login_unix_socket:  /var/lib/mysql/mysql.sock
        password: "{{ mysql_root_password }}"
        priv: '*.*:ALL,GRANT'
        host: 'localhost'
        state: present
    - name: 'copy mysql creds'
      template:
        backup: yes
        src: common/.my.cnf.j2
        dest: /root/.my.cnf
        owner: root
        mode: 0600

  when: install_mysql is changed
  tags:
    - mariadb

- name: 'install keystone'
  yum:
    name:
      - openstack-keystone 
      - mod_wsgi
      - httpd 
    state: present
  register: install_keystone
  tags: 
    - openstack
    - keystone

- name: 'setup keystone'
  block:
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE keystone;"
          - "CREATE USER `keystone`@`localhost` IDENTIFIED BY '{{keystone_password}}';"
          - "GRANT ALL ON keystone.* TO `keystone`@`localhost`;"
          - "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY '{{keystone_password}}';"
          - "GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY '{{keystone_password}}';"
    - name: 'copy keystone conf'
      template:
        backup: yes
        src: keystone/keystone.conf.j2
        dest: /etc/keystone/keystone.conf 
    - name: 'sync db'
      become: keystone
      shell: '/bin/sh -c "keystone-manage db_sync"'
      ignore_errors: True
    - name: 'setup fernet'
      shell: "keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone"
    - name: 'setup keystone credentials'
      shell: "keystone-manage credential_setup --keystone-user keystone --keystone-group keystone"
    - name: 'bootstrap keystone' 
      shell: keystone-manage bootstrap --bootstrap-password {{ admin_password }} --bootstrap-admin-url http://{{ inventory_hostname }}:5000/v3/ --bootstrap-internal-url http://{{ inventory_hostname }}:5000/v3/ --bootstrap-public-url http://{{ inventory_hostname }}:5000/v3/ --bootstrap-region-id RegionOne
      ignore_errors: True
    - name: 'copy admin script'
      template:
        backup: yes
        src: utility/admin.sh.j2
        dest: ~/admin.sh
        mode: '0700'
    - name: 'add to startup'
      shell: 'echo "source ~/admin.sh " >> ~/.bash_profile'
  when: install_keystone is changed
  tags:
    - openstack
    - keystone

- name: 'setup httpd'
  block:
    - name: 'copy httpd config'
      template:
        backup:
        src: common/httpd.conf.j2
        dest: /etc/httpd/conf/httpd.conf
    - name: 'create config link'
      shell: "ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/"
      args:
        warn: false
    - name: 'restart & enable httpd'
      systemd:
        name: httpd
        state: started
        enabled: yes
  when: install_keystone is changed
  tags:
    - openstack
    - keystone
    - httpd

- name: 'create service project and roles'
  shell: |
    source ~/admin.sh 
    openstack project create --domain default --description "Service Project" service
    openstack role create {{ student_role_name }}
    openstack role create {{ service_role_name }}
    openstack role create {{ permission_role_name }}
  when: install_keystone is changed
  tags:
    - openstack
    - keystone

- name: 'install glance'
  yum:
    name:
      - openstack-glance 
    state: present
  register: install_glance
  tags:
    - openstack
    - glance

- name: 'setup glance'
  block:
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE glance;"
          - "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY '{{glance_password}}';"
          - "GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY '{{glance_password}}';"
    - name: 'create openstack service'
      shell: |
        source ~/admin.sh 
        openstack user create --domain default --password {{glance_password}} glance
        openstack role add --project service --user glance admin
        openstack service create --name glance --description "OpenStack Image" image
        openstack endpoint create --region RegionOne image public http://{{ inventory_hostname }}:9292
        openstack endpoint create --region RegionOne image internal http://{{ inventory_hostname }}:9292
        openstack endpoint create --region RegionOne image admin http://{{ inventory_hostname }}:9292 
    - name: 'copy conf'
      template:
        backup: yes
        src: glance/glance-api.conf.j2
        dest: /etc/glance/glance-api.conf 
    - name: 'create glance image folder'
      file:
        path: "{{ glance_home_path }}/images"
        state: directory
    - name: 'add group permissions'
      shell: "chgrp -R glance {{ glance_home_path }}"
    - name: 'add owner permissions'
      shell: "chown -R glance {{ glance_home_path }}"
    - name: 'set selinux permissions'
      shell: "semanage fcontext -a -t glance_var_lib_t '{{ glance_home_path }}(/.*)?'"
    - name: 'refresh permissions'
      shell: "restorecon -vvRF {{ glance_home_path }}"
    - name: 'restart & enable glance'
      systemd:
        name: openstack-glance-api.service
        state: started
        enabled: yes
    - name: 'update permissions'
      shell: chown -R glance:glance /var/log/glance/api.log
    - name: 'sync db'
      become: glance
      shell: '/bin/sh -c "glance-manage db_sync"'
      ignore_errors: True
  when: install_glance is changed
  tags:
    - openstack
    - glance

- name: 'install placement'
  yum:
    name:
      - openstack-placement-api 
    state: present
  register: install_placement
  tags:
    - openstack
    - placement

- name: 'setup placement'
  block:
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE placement;"
          - "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'localhost' IDENTIFIED BY '{{placement_password}}';"
          - "GRANT ALL PRIVILEGES ON placement.* TO 'placement'@'%' IDENTIFIED BY '{{placement_password}}';"
    - name: 'create openstack service'
      shell: |
        source ~/admin.sh 
        openstack user create --domain default --password {{placement_password}} placement
        openstack role add --project service --user placement admin
        openstack service create --name placement --description "Placement API" placement
        openstack endpoint create --region RegionOne placement public http://{{ inventory_hostname }}:8778
        openstack endpoint create --region RegionOne placement internal http://{{ inventory_hostname }}:8778
        openstack endpoint create --region RegionOne placement admin http://{{ inventory_hostname }}:8778 
    - name: 'copy service conf'
      template:
        backup: yes
        src: placement/placement.conf.j2
        dest: /etc/placement/placement.conf
    - name: 'copy http conf'
      template:
        backup: yes
        src: placement/00-placement-api.conf.j2
        dest: /etc/httpd/conf.d/00-placement-api.conf
    - name: 'sync db'
      become: placement
      shell: '/bin/sh -c "placement-manage db sync"'
    - name: 'restart httpd'
      systemd:
        name: httpd
        state: restarted
  when: install_placement is changed
  tags:
    - openstack
    - placement

- name: 'install nova'
  yum:
    name:
      - openstack-nova-api 
      - openstack-nova-conductor
      - openstack-nova-novncproxy 
      - openstack-nova-scheduler
    state: present
  register: install_nova
  tags:
    - openstack
    - nova

- name: 'setup nova'
  block:
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE nova_api;"
          - "CREATE DATABASE nova;"
          - "CREATE DATABASE nova_cell0;"
          - "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY '{{nova_password}}';"
          - "GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY '{{nova_password}}';"
          - "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY '{{nova_password}}';"
          - "GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%'IDENTIFIED BY '{{nova_password}}';"
          - "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'localhost' IDENTIFIED BY '{{nova_password}}';"
          - "GRANT ALL PRIVILEGES ON nova_cell0.* TO 'nova'@'%' IDENTIFIED BY '{{nova_password}}';"
    - name: 'create openstack service'
      shell: |
        source ~/admin.sh 
        openstack user create --domain default --password {{nova_password}} nova
        openstack role add --project service --user nova admin
        openstack service create --name nova --description "OpenStack Compute" compute
        openstack endpoint create --region RegionOne compute public http://{{ inventory_hostname }}:8774/v2.1
        openstack endpoint create --region RegionOne compute internal http://{{ inventory_hostname }}:8774/v2.1
        openstack endpoint create --region RegionOne compute admin http://{{ inventory_hostname }}:8774/v2.1 
    - name: 'copy conf'
      template:
        backup: yes
        src: nova/nova.conf.j2
        dest: /etc/nova/nova.conf
    - name: 'sync db'
      become: nova
      shell: |
        /bin/sh -c "nova-manage api_db sync" 
        /bin/sh -c "nova-manage cell_v2 map_cell0" 
        /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" 
        /bin/sh -c "nova-manage db sync" 
        /bin/sh -c "nova-manage cell_v2 list_cells" 
    - name: 'start & enable nova api'
      systemd:
        name: openstack-nova-api.service
        state: started
        enabled: yes
    - name: 'start & enable nova scheduler'
      systemd:
        name:  openstack-nova-scheduler.service
        state: started
        enabled: yes
    - name: 'start & enable nova conductor'
      systemd:
        name: openstack-nova-conductor.service
        state: started
        enabled: yes
    - name: 'restart & enable nonvc proxy'
      systemd:
        name: openstack-nova-novncproxy.service
        state: started
        enabled: yes
    - name: 'update permissions'
      shell: chown -R nova:nova /var/log/nova/
    - name: 'discover compute hosts'
      become: nova
      shell: '/bin/sh -c "nova-manage cell_v2 discover_hosts --verbose"'
    - name: 'create openstack flavors'
      shell: |
        source ~/admin.sh 
        openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.small
        openstack flavor create --id 1 --vcpus 1 --ram 2048 --disk 20 m1.small
        openstack flavor create --id 2 --vcpus 1 --ram 4096 --disk 50 m1.medium
        openstack flavor create --id 3 --vcpus 1 --ram 8192 --disk 100 m1.large
        openstack flavor create --id 4 --vcpus 1 --ram 16384 --disk 200 m1.huge
        openstack flavor create --id 5 --vcpus 2 --ram 2048 --disk 20 m2.small
        openstack flavor create --id 6 --vcpus 2 --ram 4096 --disk 50 m2.medium
        openstack flavor create --id 7 --vcpus 2 --ram 8192 --disk 100 m2.large
        openstack flavor create --id 8 --vcpus 2 --ram 16384 --disk 200 m2.huge
        openstack flavor create --id 9 --vcpus 4 --ram 2048 --disk 20 m4.small
        openstack flavor create --id 10 --vcpus 4 --ram 4096 --disk 50 m4.medium
        openstack flavor create --id 11 --vcpus 4 --ram 8192 --disk 100 m4.large
        openstack flavor create --id 12 --vcpus 4 --ram 16384 --disk 200 m4.huge
        openstack flavor create --id 13 --vcpus 8 --ram 2048 --disk 20 m8.small
        openstack flavor create --id 14 --vcpus 8 --ram 4096 --disk 50 m8.medium
        openstack flavor create --id 15--vcpus 8 --ram 8192 --disk 100 m8.large
        openstack flavor create --id 16 --vcpus 8 --ram 16384 --disk 200 m8.huge
        openstack flavor create --id 17 --vcpus 16 --ram 2048 --disk 20 m16.small
        openstack flavor create --id 18 --vcpus 16 --ram 4096 --disk 50 m16.medium
        openstack flavor create --id 19 --vcpus 16 --ram 8192 --disk 100 m16.large
        openstack flavor create --id 20 --vcpus 16 --ram 16384 --disk 200 m16.huge
  when: install_nova is changed
  tags:
    - openstack
    - nova

- name: 'install neutron'
  yum:
    name:
      - openstack-neutron 
      - openstack-neutron-ml2
      - openstack-neutron-linuxbridge 
      - ebtables
    state: present
  register: install_neutron
  tags:
    - openstack
    - neutron

- name: 'setup neutron'
  block:
    - name: 'run startup'
      shell: '$HOME/startup.sh'
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE neutron;"
          - "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY '{{neutron_password}}';"
          - "GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY '{{neutron_password}}';"
      tags:
        - mariadb
    - name: 'create openstack service'
      shell: |
        source ~/admin.sh 
        openstack user create --domain default --password {{neutron_password}} neutron
        openstack role add --project service --user neutron admin
        openstack service create --name neutron --description "OpenStack Networking" network
        openstack endpoint create --region RegionOne network public http://{{ inventory_hostname }}:9696
        openstack endpoint create --region RegionOne network internal http://{{ inventory_hostname }}:9696
        openstack endpoint create --region RegionOne network admin http://{{ inventory_hostname }}:9696
      tags:
        - neutronservice
    - name: 'copy service conf'
      template:
        backup: yes
        src: neutron/neutron.conf.j2
        dest: /etc/neutron/neutron.conf
    - name: 'copy ml2 conf'
      template:
        backup: yes
        src: neutron/ml2_conf.ini.j2
        dest:  /etc/neutron/plugins/ml2/ml2_conf.ini
    - name: 'copy linuxbridge conf'
      template:
        backup: yes
        src: neutron/linuxbridge_agent.ini.j2
        dest: /etc/neutron/plugins/ml2/linuxbridge_agent.ini
    - name: 'copy l3 conf'
      template:
        backup: yes
        src: neutron/l3_agent.ini.j2
        dest: /etc/neutron/l3_agent.ini
    - name: 'copy dhcp conf'
      template:
        backup: yes
        src:  neutron/dhcp_agent.ini.j2
        dest: /etc/neutron/dhcp_agent.ini
    - name: 'copy metadata conf'
      template:
        backup: yes
        src: neutron/metadata_agent.ini.j2
        dest: /etc/neutron/metadata_agent.ini 
    - name: 'symbolic link'
      shell: ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini
    - name: 'sync db'
      become: neutron
      shell: '/bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head"'
    - name: 'set up bridging'
      shell: |
        modprobe br_netfilter
        sysctl -p
        sysctl net.bridge.bridge-nf-call-iptables
        sysctl net.bridge.bridge-nf-call-ip6tables
    - name: 'start & enable service'
      systemd:
        name: neutron-server.service
        state: started
        enabled: yes
    - name: 'start & enable linuxbridge agent'
      systemd:
        name:  neutron-linuxbridge-agent.service
        state: started
        enabled: yes
    - name: 'start & enable dhcp agent'
      systemd:
        name: neutron-dhcp-agent.service
        state: started
        enabled: yes
    - name: 'start & enable metadata agent'
      systemd:
        name: neutron-metadata-agent.service
        state: started
        enabled: yes
    - name: 'start & enable l3 agent'
      systemd:
        name: neutron-l3-agent.service
        state: started
        enabled: yes
  when: install_neutron is changed
  tags:
    - openstack
    - neutron

- name: 'install horizon'
  yum:
    name:
      - openstack-dashboard
    state: present
  register: install_horizon
  tags:
    - openstack
    - horizon

- name: 'setup horizon'
  block:
    - name: 'copy local settings'
      template:
        backup: yes
        src: horizon/local_settings.j2
        dest: /etc/openstack-dashboard/local_settings
    - name: 'copy ml2 conf'
      template:
        backup: yes
        src: horizon/openstack-dashboard.conf.j2
        dest: /etc/httpd/conf.d/openstack-dashboard.conf
    - name: 'restart http'
      systemd:
        name: httpd
        state: restarted        
    - name: 'copy bsoe img'
      copy:
        src: horizon/images/bsoe.png
        dest: /usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/bsoe.png
    - name: 'copy ccet img'
      copy:
        src: horizon/images/ccet.png
        dest: /usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/ccet.png
    - name: 'copy favicon'
      copy:
        backup: true
        src: horizon/images/favicon.ico
        dest: /usr/share/openstack-dashboard/openstack_dashboard/static/dashboard/img/favico.icon  
    - name: 'copy base html file'
      copy: 
        backup: true
        src: horizon/html/base.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/base.html
    - name: 'copy dev.base html file'
      copy: 
        src: horizon/html/dev.base.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/dev.base.html
    - name: 'copy prod.base html file'
      copy: 
        src: horizon/html/prod.base.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/prod.base.html
    - name: 'copy header brand'
      copy:
        backup: true
        src: horizon/html/_brand.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/header/_brand.html
    - name: 'copy splash screen'
      copy:
        backup: true
        src: horizon/html/_splash.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/auth/_splash.html
    - name: 'copy stylesheets'
      copy:
        backup: true
        src: horizon/html/_stylesheets.html
        dest: /usr/share/openstack-dashboard/openstack_dashboard/templates/_stylesheets.html
    # - name: 'copy panel.py'
    #   copy:
    #     backup: true
    #     src: horizon/html/panel.py
    #     dest: /usr/share/openstack-dashboard/openstack_dashboard/dashboards/project/network_topology/panel.py
    - name: 'copy active maintenance script'
      copy:
        backup: true
        src: horizon/script/active-maintenance-toggle.sh
        dest: ~/active_maintenance-toggle.sh
        owner: root
        group: root
        mode: '0755'
    - name: 'restart http'
      systemd:
        name: httpd
        state: restarted
    - name: 'TODO: oslo policy configuration task'
      debug: 
        msg: 'TODO: oslo policy configuration task'
  when: install_horizon is changed
  tags:
    - openstack
    - horizon

- name: 'install cinder'
  yum:
    name:
      - openstack-cinder
    state: present
  register: install_cinder
  tags:
    - openstack
    - cinder

- name: 'setup cinder'
  block:
    - name: 'create database'
      community.mysql.mysql_query:
        login_unix_socket: /var/lib/mysql/mysql.sock
        query: 
          - "CREATE DATABASE cinder;"
          - "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY '{{cinder_password}}';"
          - "GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY '{{cinder_password}}';"
    - name: 'create openstack service'
      shell: |
        source ~/admin.sh 
        openstack user create --domain default --password {{cinder_password}} cinder
        openstack role add --project service --user cinder admin
        openstack service create --name cinderv2 --description "OpenStack Block Storage" volumev2
        openstack service create --name cinderv3 --description "OpenStack Block Storage" volumev3
        # TODO: verify that these changes to the double escape work as intended.
        openstack endpoint create --region RegionOne volumev2 public http://{{ inventory_hostname }}:8776/v2/%\(project_id\)s
        openstack endpoint create --region RegionOne volumev2 internal http://{{ inventory_hostname }}:8776/v2/%\(project_id\)s
        openstack endpoint create --region RegionOne volumev2 admin http://{{ inventory_hostname }}:8776/v2/%\(project_id\)s
        openstack endpoint create --region RegionOne volumev3 public http://{{ inventory_hostname }}:8776/v3/%\(project_id\)s
        openstack endpoint create --region RegionOne volumev3 internal http://{{ inventory_hostname }}:8776/v3/%\(project_id\)s
        openstack endpoint create --region RegionOne volumev3 admin http://{{ inventory_hostname }}:8776/v3/%\(project_id\)s
    - name: 'copy service conf'
      template:
        backup: yes
        src: cinder/cinder.conf.j2
        dest: /etc/cinder/cinder.conf
    - name: 'restart nova'
      systemd:
        name:  openstack-nova-api.service
        state: restarted
    - name: 'start & enable api'
      systemd:
        name: openstack-cinder-api.service
        state: started
        enabled: yes
    - name: 'start & enable scheduler'
      systemd:
        name: openstack-cinder-scheduler.service
        state: started
        enabled: yes
    - name: 'update permissions'
      shell: chown -R cinder:cinder /var/log/cinder/cinder-manage.log
    - name: 'sync db'
      become: cinder
      shell: '/bin/sh -c "cinder-manage db sync"'
    - name: 'start & enable scheduler'
      systemd:
        name:  openstack-cinder-api.service
        state: restarted
  when: install_cinder is changed
  tags:
    - openstack
    - cinder